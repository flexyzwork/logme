// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// NextAuth.js 기본 모델 (Prisma Adapter 기준)
/// https://authjs.dev/reference/adapter/prisma

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  userSettings  UserSettings[]
  userPlans     UserPlan[]

  sites         Site[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme     Theme    @default(system)
  language  Language @default(ko)
  updatedAt DateTime @updatedAt
}

model UserPlan {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan     @default(free)
  expiredAt DateTime?
  createdAt DateTime @default(now())
}


/// 템플릿 - 노션 템플릿
model Template {
  id                     String        @id @default(cuid())
  templatesType          TemplateType
  templateTitle          String
  templateDescription    String?
  thumbnailUrl           String?
  templateSourceId       String        @unique
  templateSourceUrl      String        @unique
  templateAppId          String        /// 노션 API 통합 앱 ID
  createdAt              DateTime      @default(now())
  updatedAt              DateTime?     @updatedAt

  sites                  Site[]
  templateApp            TemplateApp?  @relation("TemplateToApp") // 1:1 관계
}

model TemplateApp {
  id                String     @id @default(cuid())
  appClientId       String
  appClientSecret   String
  appRedirectUri    String
  appOwnerEmail     String
  templateId        String     @unique  // 🔥 1:1을 위해 unique 지정
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?  @updatedAt

  template          Template   @relation("TemplateToApp", fields: [templateId], references: [id])
}


/// 사이트 (블로그, 이력서 등)
model Site {
  id              String         @id @default(cuid())
  siteType        SiteType?      @default(blog)
  slug            String         @unique
  siteTitle       String?
  siteDescription String?
  userId          String
  templateId      String?
  encryptedTemplateAppToken String?
  contentSourceId String?         
  domainType      DomainType      @default(sub)
  domain          String?
  status          SiteStatus      @default(draft)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  template        Template?       @relation(fields: [templateId], references: [id])
  builds          Build[]


  @@index([slug])
  @@index([userId])
  @@index([templateId])
}


model Build {
  id          String      @id @default(cuid())
  siteId      String
  status      BuildStatus @default(pending)
  outputUrl   String?     // R2 배포 주소
  logs        String?     // 선택적으로 R2 경로 or 로그 내용
  error       String?
  errorCode   String?   // (예: 'template-not-found', 'r2-upload-failed' 등)

  queuedAt    DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime    @default(now())

  site        Site        @relation(fields: [siteId], references: [id])
}

//
// ENUM 정의
//

/// 템플릿 타입 (e.g., 블로그, 이력서 등)
enum TemplateType {
  blog
  resume
  portfolio
  custom
}

/// 사이트 타입 (e.g., site, resume 등)
enum SiteType {
  blog
  resume
  portfolio
}

/// 도메인 타닙
enum DomainType {
  sub     // 서브도메인 (예: xxx.flexyz.work)
  custom  // 사용자 커스텀 도메인
}

/// 사이트 상태
enum SiteStatus {
  draft
  published
  error
}

/// 빌드 상태
enum BuildStatus {
  pending
  queued
  building
  retrying
  success
  error
}


/// 소스 타입
enum SourceType {
  notion
}

enum Theme {
  light
  dark
  system
}

enum Plan {
  free
  pro
  team
}

enum Language {
  ko
  en
  ja
  zh
}