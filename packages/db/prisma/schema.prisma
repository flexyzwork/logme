// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// NextAuth.js 기본 모델 (Prisma Adapter 기준)
/// https://authjs.dev/reference/adapter/prisma

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  userSettings  UserSettings[]
  userPlans     UserPlan[]

  sites         Site[]
  providers     Provider[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme     Theme    @default(system)
  language  Language @default(ko)
  updatedAt DateTime @updatedAt
}

model UserPlan {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan     @default(free)
  expiredAt DateTime?
  createdAt DateTime @default(now())
}


/// 템플릿 - 노션 템플릿
model Template {
  id                     String        @id @default(cuid())
  templatesType          TemplateType
  templateTitle          String
  templateDescription    String?
  thumbnailUrl           String?
  templateSourceId       String        @unique
  templateSourceUrl      String        @unique
  templateAppId          String        /// 노션 API 통합 앱 ID
  createdAt              DateTime      @default(now())
  updatedAt              DateTime?     @updatedAt
  deletedAt              DateTime?

  sites                  Site[]
  templateApp            TemplateApp?  @relation("TemplateToApp") // 1:1 관계
}

model TemplateApp {
  id                String     @id @default(cuid())
  appClientId       String
  appClientSecret   String
  appRedirectUri    String
  appOwnerEmail     String
  templateId        String     @unique  // 🔥 1:1을 위해 unique 지정
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?  @updatedAt

  template          Template   @relation("TemplateToApp", fields: [templateId], references: [id])
}


/// 사이트 (블로그, 이력서 등)
model Site {
  id              String         @id @default(cuid())
  siteType        SiteType?      @default(blog)
  sub             String         
  siteTitle       String?
  siteDescription String?
  userId          String
  templateId      String?
  // encryptedTemplateAppToken String?
  domainType      DomainType      @default(sub)
  domain          String?
  status          SiteStatus      @default(draft)

  contentSourceId String?         @unique
  repoId          String?         @unique
  deployTargetId  String?         @unique


  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  user            User            @relation(fields: [userId], references: [id])
  template        Template?       @relation(fields: [templateId], references: [id])
  contentSource   ContentSource?  @relation(fields: [contentSourceId], references: [id])
  repo            Repo?           @relation(fields: [repoId], references: [id])
  deployTarget    DeployTarget?   @relation(fields: [deployTargetId], references: [id])
  builds          Build[]
  domainVerifications  DomainVerification[]

  @@index([sub])
  @@index([userId])
  @@index([templateId])
  @@index([contentSourceId])
  @@index([repoId])
  @@index([deployTargetId])
}


model Build {
  id          String      @id @default(cuid())
  siteId      String
  status      BuildStatus @default(pending)
  outputUrl   String?     // R2 배포 주소
  logs        String?     // 선택적으로 R2 경로 or 로그 내용
  error       String?
  errorCode   String?   // (예: 'template-not-found', 'r2-upload-failed' 등)

  queuedAt    DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime    @default(now())

  site        Site        @relation(fields: [siteId], references: [id])
}

/// 배포 이력
model Deployment {
  id              String        @id @default(cuid())
  deployTargetId  String
  deployId        String        @unique
  status          DeployStatus? @default(deploying)
  deployUrl       String?
  triggeredAt     DateTime      @default(now())
  completedAt     DateTime?

  deployTarget    DeployTarget  @relation(fields: [deployTargetId], references: [id])
  @@index([deployTargetId])
  @@index([deployId])
}



/// (외부 서비스) 제공자
model Provider {
  id              String   @id @default(cuid())
  providerType    ProviderType
  providerUserId  String                        /// 각 서비스의 유저 ID
  name            String                        /// 사용자 이름
  email           String?                       /// 사용자 이메일
  avatarUrl       String?                       /// 아바타 URL
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userId          String

  user            User     @relation(fields: [userId], references: [id])
  
  providerExtended  ProviderExtended[]

  @@unique([providerType, providerUserId])
}


model ProviderExtended {
  id             String   @id @default(cuid())
  providerType   ProviderType
  templateId     String?
  extendedKey    String
  extendedValue  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  providerId     String

  provider       Provider  @relation(fields: [providerId], references: [id])

  @@unique([providerId, extendedKey])
}

/// 컨텐츠 소스 - 노션 페이지
model ContentSource {
  id           String      @id @default(cuid())
  sourceType   SourceType  @default(notion)
  sourceId     String      @unique
  sourceUrl    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  site         Site?
}


/// 저장소 - GitHub 레포
model Repo {
  id         String   @id @default(cuid())
  repoType   RepoType @default(github)
  repoId     String   @unique
  repoName   String
  repoUrl    String?
  repoOwner  String
  repoBranch String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  site       Site?
}

/// 배포 대상 - Vercel 프로젝트
model DeployTarget {
  id           String        @id @default(cuid())
  targetType   TargetType    @default(vercel)
  targetId     String        @unique
  targetName   String
  targetUrl    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  site          Site?
  deployments   Deployment[]
}

model DomainVerification {
  id              String   @id @default(cuid())
  subdomain       String
  vercelProjectId String
  providerId      String
  verified        Boolean  @default(false)
  retries         Int      @default(0)
  siteId          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  site            Site?    @relation(fields: [siteId], references: [id])
}


model EventLog {
  id        String   @id @default(uuid())
  userId    String?
  event     String
  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}


model YoutubeChannelStats {
  id               String   @id @default(cuid())
  channelId        String
  subscriber_count Int
  view_count       Int?
  video_count      Int?
  checked_at       DateTime @default(now())

  @@index([channelId, checked_at])
}

model YoutubeVideoStats {
  id             String   @id @default(cuid())
  videoId        String
  channelId      String
  title          String
  view_count     Int?
  like_count     Int?
  comment_count  Int?
  checked_at     DateTime @default(now())

  @@index([videoId, checked_at])
}

model YoutubeAlertLog {
  id         String   @id @default(cuid())
  type       String   // 'channel' | 'video'
  targetId   String   // channelId or videoId
  message    String?
  notifiedAt DateTime @default(now())

  @@index([type, targetId])
}



//
// ENUM 정의
//

/// 템플릿 타입 (e.g., 블로그, 이력서 등)
enum TemplateType {
  blog
  resume
  portfolio
  custom
}

/// 사이트 타입 (e.g., site, resume 등)
enum SiteType {
  blog
  resume
  portfolio
}

/// 도메인 타입
enum DomainType {
  sub     // 서브도메인 (예: xxx.logme.click)
  custom  // 사용자 커스텀 도메인
}

/// 사이트 상태
enum SiteStatus {
  draft
  published
  error
}

/// 빌드 상태
enum BuildStatus {
  pending
  queued
  building
  retrying
  success
  error
}


/// 소스 타입
enum SourceType {
  notion
}

enum Theme {
  light
  dark
  system
}

enum Plan {
  free
  pro
  team
}

enum Language {
  ko
  en
  ja
  zh
}


/// 배포 상태
enum DeployStatus {
  pending
  deploying
  success
  error
  cancelled
}

/// 제공자 타입
enum ProviderType {
  github
  notion
  vercel
  google
}


/// 저장소 타입
enum RepoType {
  github
  gitlab
  bitbucket
}

/// 타겟 타입
enum TargetType {
  vercel
  netlify
  aws
  cloudflare
  custom
}


