name: Deploy to EC2

on:
  push:
    branches:
      - deploy

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to OCI Registry
        run: |
          echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login kix.ocir.io -u "${{ secrets.OCI_USERNAME }}" --password-stdin

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github
          chmod 600 ~/.ssh/github
          echo "Host ec2" >> ~/.ssh/config
          echo "  HostName ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  User ubuntu" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/github" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Create .env
        run: |
          echo "${{ secrets.ENV_FILE }}" > apps/web/.env
          echo "${{ secrets.ENV_FILE_NGINX }}" > apps/nginx/.env
          echo "${{ secrets.ENV_FILE_WORKER }}" > apps/api/.env
          echo "${{ secrets.ENV_FILE_WORKER }}" > apps/worker/.env

      - name: Copy files with rsync
        run: |
          HOST="ubuntu@${{ secrets.SSH_HOST }}"

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github $HOST "mkdir -pv ~/app/apps/{web,worker,api}"

          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github" docker-compose.yaml $HOST:~/app/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github" apps/nginx/ $HOST:~/app/apps/nginx/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github" apps/web/.env $HOST:~/app/apps/web/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github" apps/api/.env $HOST:~/app/apps/api/
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/github" apps/worker/.env $HOST:~/app/apps/worker/

      - name: Determine Active
        id: active_version
        run: |
          ACTIVE=$(ssh ec2 "docker ps --format '{{.Names}}' | grep -q 'app-blue' && echo blue || echo green")
          echo "ACTIVE=$ACTIVE" >> $GITHUB_ENV
          if [[ \"$ACTIVE\" == \"blue\" ]]; then
              echo "NEW=green" >> $GITHUB_ENV
          else
              echo "NEW=blue" >> $GITHUB_ENV
          fi

      - name: Check GITHUB_ENV
        run: echo $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache for Turbo
        uses: rharkor/caching-for-turbo@v1.8

      - name: Install Dependencies
        run: pnpm install

      - name: Run Lint
        run: pnpm turbo run lint

      - name: Run Test
        run: pnpm --filter ./apps/web test
        env:
          ENCRYPTION_SECRET: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef

      - name: Prisma generate (for db)
        working-directory: packages/db
        run: pnpm prisma generate

      - name: Turbo Build
        run: pnpm turbo run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Image (WEB)
        uses: docker/build-push-action@v6
        with:
          file: ./apps/web/Dockerfile
          context: .
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            kix.ocir.io/axunckhvyv1v/logme-app:${{ env.NEW }}
            kix.ocir.io/axunckhvyv1v/logme-app:latest

      - name: Build and Push Image (API)
        uses: docker/build-push-action@v6
        with:
          file: ./apps/api/Dockerfile
          context: .
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            kix.ocir.io/axunckhvyv1v/logme-api:${{ env.NEW }}
            kix.ocir.io/axunckhvyv1v/logme-api:latest

      - name: Build and Push Image (WORKER)
        uses: docker/build-push-action@v6
        with:
          file: ./apps/worker/Dockerfile
          context: .
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            kix.ocir.io/axunckhvyv1v/logme-worker:${{ env.NEW }}
            kix.ocir.io/axunckhvyv1v/logme-worker:latest

      - name: Ensure Vector container is running
        run: |
          ssh ec2 << 'EOF'
          if ! docker ps --format '{{.Names}}' | grep -q "vector"; then
            echo "üîß Vector container is not running. Restarting..."
            cd ~/app
            docker-compose up -d vector
          else
            echo "Vector container is running"
          fi
          EOF

      - name: Deploy on EC2
        run: |
          ssh ec2 << 'EOF'
          set -e

          rollback() {
              echo "‚ùå Deployment failed! Rolling back to previous container..."
              docker-compose kill app-${{ env.NEW }}
              docker-compose rm -f app-${{ env.NEW }}

              docker system prune -a -f
              exit 1
          }
          cleanup() {
              echo "Deployment successful! Cleaning up previous container..."
              docker-compose kill app-${{ env.ACTIVE }}
              docker-compose rm -f app-${{ env.ACTIVE }}

              sleep 5
              docker system prune -a -f
          }
          trap rollback ERR

          cd ~/app

          echo "Current containers: $(docker ps --format '{{.Names}}')"

          echo "ACTIVE=${{ env.ACTIVE }}" > .env

          docker-compose pull app-${{ env.NEW }}
          docker-compose up -d app-${{ env.NEW }}

          sleep 10

          # Health check
          if docker ps --format '{{.Names}}' | grep -q "nginx"; then
              echo "Nginx is running! Performing application health check..."
              sleep 10
              if curl -fs https://logme.dev/api/health | grep -q '"status":"ok"'; then
                  echo "App health check passed!"
              else
                  echo "‚ùå App health check failed! Performing rollback"
                  rollback
              fi
          else
              echo "‚ö†Ô∏è Nginx not running! Proceeding with container status health check..."
              sleep 5
              docker ps --format '{{.Names}}' | grep -q "app-${{ env.NEW }}" || rollback
              echo "app-${{ env.NEW}} container is running normally!"
          fi

          echo "Deployment succeeded!"
          echo "ACTIVE=${{ env.NEW }}" > .env
          export $(grep -v '^#' .env | xargs)
          echo "${{ env.ACTIVE }} -> $ACTIVE"


          docker ps --format '{{.Names}}' | grep -q "nginx" && docker-compose exec -e ACTIVE="$ACTIVE" nginx /bin/sh -c "envsubst '\$ACTIVE' < /etc/nginx/nginx.conf.template.ssl > /etc/nginx/nginx.conf && nginx -t && nginx -s reload" || docker-compose up -d --force-recreate nginx
          docker-compose pull api && docker-compose rm -f api && docker-compose up -d api
          docker-compose pull worker && docker-compose rm -f worker && docker-compose up -d worker

          cleanup

          EOF

      - name: Slack Notification (Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"Deployment successful: '${{ github.repository }}' branch '${{ github.ref_name }}'"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification (Failure)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå Deployment failed: '${{ github.repository }}' branch '${{ github.ref_name }}' requires attention!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
